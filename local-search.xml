<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>搭建个人网页教程</title>
    <link href="/2024/10/16/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E9%A1%B5%E6%95%99%E7%A8%8B/"/>
    <url>/2024/10/16/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E9%A1%B5%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建个人网页"><a href="#搭建个人网页" class="headerlink" title="搭建个人网页"></a>搭建个人网页</h1><p>这篇文章是关于如何简单搭建自己的网页</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>可以租一个服务器,比如阿里云服务器、腾讯云服务器等等。可以参考<a href="https://developer.aliyun.com/article/1324081">服务器租用教程</a><br><br>租用好服务器就可以通过控制台直接连接了。</p><h2 id="Nginx安装与配置"><a href="#Nginx安装与配置" class="headerlink" title="Nginx安装与配置"></a>Nginx安装与配置</h2><h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><p>首先用如下代码完成nginx的安装<br><br><code>sudo apt update</code><br><br><code> sudo apt install nginx</code><br><br>用以下代码验证安装成功<br><br><code> nginx -v</code><br></p><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><p>使用vim打开Nginx配置文件。<br><br><code> sudo vim /etc/nginx/nginx.conf</code><br><br>在http块中增加如下内容<br><br><img src="/2024/10/16/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E9%A1%B5%E6%95%99%E7%A8%8B/1.png" alt="1"><br><br>listen表示监听的端口。server_name表示服务器的ip地址或域名，填127.0.0.1即可。root则是存放网页文件的根目录，一般设置为&#x2F;var&#x2F;www&#x2F;html。location 指定了请求的 URL 匹配规则，这里我们将所有的请求都指向静态文件，并返回404错误。<br><br>测试配置是否有效<br><br><code> sudo nginx -t</code><br><br>如果配置文件没有错误，应该会看到以下输出<br><br><code> nginx: configuration file /etc/nginx/nginx.conf test is successful</code><br><br>最后，使用以下命令重启 Nginx 以使新的配置生效：<br><code> sudo systemlctl restart nginx</code><br></p><h2 id="网页文件"><a href="#网页文件" class="headerlink" title="网页文件"></a>网页文件</h2><p>将网页文件全部打包到&#x2F;var&#x2F;www&#x2F;html目录下。<br><br>访问ip:port即可访问页面。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Graph-Corloring</title>
    <link href="/2024/10/13/Graph-Corloring/"/>
    <url>/2024/10/13/Graph-Corloring/</url>
    
    <content type="html"><![CDATA[<h1 id="Graph-Corloring"><a href="#Graph-Corloring" class="headerlink" title="Graph-Corloring"></a>Graph-Corloring</h1><h2 id="problem-formulation"><a href="#problem-formulation" class="headerlink" title="problem formulation"></a>problem formulation</h2><p>给定一个图G（V,E），将G划分为K个子集，每个子集中的节点都互不邻接。</p><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
    
    
    <categories>
      
      <category>算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客搭建流程（github+hexo）</title>
    <link href="/2024/10/12/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88github-hexo%EF%BC%89/"/>
    <url>/2024/10/12/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88github-hexo%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="个人博客搭建流程（github-hexo）"><a href="#个人博客搭建流程（github-hexo）" class="headerlink" title="个人博客搭建流程（github+hexo）"></a>个人博客搭建流程（github+hexo）</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>git是一个开源的分布式版本控制系统，使用git可以让你在进行团队或个人开发的时候，更好的管理不同版本的代码。<br><br>详情参照<a href="https://blog.csdn.net/yaorongke/article/details/119085413">git安装</a></p><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>node.js是一个js的运行环境<br><br>详情参考<a href="https://blog.csdn.net/yaorongke/article/details/119084295">nodejs安装</a></p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>hexo是一个静态博客网站生成器，具有博客在线预览，为博客生成静态文件，将静态文件打包到github上的功能，非常便利。<br><br>安装hexo<br><br><code>npm install -g hexo-cli</code><br><br>创建一个项目并初始化，例如<br><br><code> hexo init blog</code><br><br><code> cd blog</code><br><br><code> npm install</code><br></p><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>如下修改 Hexo 博客目录中的 _config.yml，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。<br><br><code>post_asset_folder: true</code><br><br>执行如下命令创建一篇新文章，比如“个人博客搭建流程”<br><br><code>hexo new post 个人博客搭建流程</code><br><br>在该路径下会有一个.md文件，对文章内容修改只需要在.md文件修改即可。<br><br><img src="/2024/10/12/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88github-hexo%EF%BC%89/1.png" alt="1"><br><br>修改途中可以用如下代码在<a href="http://localhost:4000/">本地</a>预览博客<br><br><code>hexo g</code><br><br><code>hexo s</code></p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>在github中创建一个名为<code>username.github.io</code>的仓库。<br><br>将博客目录与博客仓库默认分支远程关联。<br><br><code>git remote add origin https://github.com/username/repository.git</code><br><br><code>git checkout master</code><br><br><code>git push -u origin master</code><br></p><h3 id="部署博客网页"><a href="#部署博客网页" class="headerlink" title="部署博客网页"></a>部署博客网页</h3><p><code>hexo g</code><br><br><code>hexo deploy</code><br></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CV</title>
    <link href="/2024/10/11/CV/"/>
    <url>/2024/10/11/CV/</url>
    
    <content type="html"><![CDATA[<h2 id="Work-Experience"><a href="#Work-Experience" class="headerlink" title="Work Experience"></a>Work Experience</h2><h3 id="AntHap-蚁触科技-后端开发实习生"><a href="#AntHap-蚁触科技-后端开发实习生" class="headerlink" title="AntHap(蚁触科技)后端开发实习生"></a>AntHap(蚁触科技)后端开发实习生</h3><ul><li>FancyHaptic后端开发。使用ginskeleton框架进行后端业务开发。</li></ul><h2 id="Education"><a href="#Education" class="headerlink" title="Education"></a>Education</h2><ul><li>Undergraduate : HUST,CSE</li><li>Master : HUST,CS</li><li>Lab : 人工智能与优化研究所EDA与工业优化团队</li></ul><h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><h2 id="Projects"><a href="#Projects" class="headerlink" title="Projects"></a>Projects</h2><h3 id="面向物联网设备的加密代理装置设计"><a href="#面向物联网设备的加密代理装置设计" class="headerlink" title="面向物联网设备的加密代理装置设计"></a>面向物联网设备的加密代理装置设计</h3><ul><li>核心技术: TCP&#x2F;UDP通信协议编程、计算机网络及操作系统基础知识、Golang、密码算法基础知识<br>协议设计者、加密代理装置编程者</li><li>项目描述:</li><li>项目主要包括加密模块、传输模块。</li><li>加密模块使用国密算法sm2、sm3、sm4等完成，完成了用户身份鉴定、完整性校验、机密性保护等功能。</li><li>传输模块中基于udp协议设计了用于物联网设备的通信协议，使用了并发锁，超时重传等机制保证数据可靠传输，使用</li><li>putty模拟链路高负载情况下丢包率低于1%。</li><li>项目地址：<a href="https://github.com/qjz66/cypher-agent">https://github.com/qjz66/cypher-agent</a></li></ul><h3 id="RumorBuzz：基于多领域自适应学习的谣言检测及交互平台"><a href="#RumorBuzz：基于多领域自适应学习的谣言检测及交互平台" class="headerlink" title="RumorBuzz：基于多领域自适应学习的谣言检测及交互平台"></a>RumorBuzz：基于多领域自适应学习的谣言检测及交互平台</h3><p>后端负责人</p><ul><li>项目架构: MVC架构</li><li>核心技术: gin、gorm、MySQL、jwt、Redis</li><li>项目描述: 前后端分离项目。根据项目需求与前端协商接口文档并建模使⽤ Gin、Gorm 等框架构建 RESTful API 服务。使</li><li>用JWT认证提供认证模块。使用redis作为缓存数据库，实现热榜、点赞等功能。</li><li>项目地址：<a href="https://github.com/qjz66/ISWC">https://github.com/qjz66/ISWC</a></li></ul><h3 id="MIT-6-824-分布式系统"><a href="#MIT-6-824-分布式系统" class="headerlink" title="MIT 6.824 分布式系统"></a>MIT 6.824 分布式系统</h3><ul><li>编写核心组件、学习分布式知识</li><li>核心技术：MapReduce、Raft 、kv存储</li><li>项目描述：</li><li>实现单机多进程版本的并行计算 MapReduce，使得通过 MapReduce 建模的问题可以大幅提高并行处理性能</li><li>实现支持选举、日志复制等机制的 Raft 共识算法，并对日志回退进行优化，减少不必要 RPC 请求</li><li>底层使用自实现 Raft 构建高可用 KV 存储服务，集群节点只要超过⼀半正常服务，便可对外提供服务，大幅提高集群可用性</li></ul><h2 id="Contact"><a href="#Contact" class="headerlink" title="Contact"></a>Contact</h2><ul><li><a href="https://github.com/qjz66">Github</a></li><li><a href="2199921383@qq.com">Email</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>个人介绍</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
